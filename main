#include <iostream>
#include <ctime>

class Monster
{
public:

    enum MonsterType
    {
        Dragon,
        Goblin,
        Orge,
        Orc,
        Skeleton,
        Troll,
        Vampire,
        Zombie,
        MAX_MONSTER_TYPES
    };

private:
    MonsterType m_type;
    std::string m_name;
    int m_health;

public:
    Monster(MonsterType type, const std::string& name, int health)
        : m_type(type), m_name(name), m_health(health) {}

    std::string getTypeString() const
    {
        switch (m_type) 
        {
        case Dragon: return "dragon";
        case Goblin: return "goblin";
        case Orge: return "orge";
        case Orc: return "orc";
        case Skeleton: return "skeleton";
        case Troll: return "troll";
        case Vampire: return "vampire";
        case Zombie: return "zombie";
        default: return "Error";
        }
    }
    void print() const
    {
        std::cout << m_name << " is the " << getTypeString() << " that has "
            << m_health << " health points.\n";
    }
};


class MonsterGenerator
{
public:
    // Генерируем случайное число между min и max (включительно)
    // Предполагается, что srand() уже был вызван 
    static int getRandomNumber(int min, int max)
    {
        // используем static, так как это значение нужно вычислить только один раз
        static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);
        // Равномерно распределяем вычисление значения из нашего диапазона
        return static_cast<int>(rand() * fraction * (max - min + 1) + min);
    }
    
    static Monster generateMonster()
    {
        //статический массив имён - для того, чтобы не инициализировать по сто раз - память, время
        static std::string names[6]{ "Oliver", "Emily", "Jacob", "Sophie", "Leo", "Chloe" };
        //параметры: 1) рандомный монстр от 0 до (максимального-1) - параметр отправляется при создании анонимного объекта 
        //2) рандомное имя монстра из списка имён выше (пока что 6)
        //3) рандомное здоровье от 1 до 100 вкл.
        //Monster(..., ..., ...) - анонимный объект класса Monster
        return Monster(static_cast<Monster::MonsterType>(getRandomNumber(0, static_cast<int>(Monster::MAX_MONSTER_TYPES) - 1)),
            names[getRandomNumber(0, 5)], getRandomNumber(1, 100));
    }
};


int main()
{
    srand(static_cast<unsigned int>(time(0)));// для getRandomNumber()
    rand();

    Monster m = MonsterGenerator::generateMonster();
    m.print();
    return 0;
}

